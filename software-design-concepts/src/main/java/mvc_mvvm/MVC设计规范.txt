金典软件设计典范, 基础软件架构模型
1. View: 程序中处理数据显示的部分
2. Controller: 程序中处理用户交互的部分, 将M和V的代码分离
3. Model: DataModel + 应用程序数据逻辑, 业务逻辑(网络请求, 数据库处理, I/O等)
不足之处：一个页面的业务繁多复杂的话, Controller里的代码会十分庞大

WPF桌面软件应用基础架构模型
1. View: UI视图
2. Model: DataModel + 应用程序数据逻辑, 业务逻辑(网络请求, 数据库处理, I/O等)
3. ViewModel: 通过数据绑定的方式将Model和View关联, 一旦Model方式变化, 数据将会自动的刷新到界面
       不做任何UI相关事情(比如获取UI界面元素), 更新UI通过数据绑定实现
优点:
1. ViewModel只关注数据和业务逻辑，不和UI或者控件打交道; 数据自动去驱动UI去自动更新UI，UI的改变又同时自动反馈到数据
2. 数据成为主导因素，在业务逻辑处理只要关心数据，UI如何处理数据由UI决定
3. View和ViewModel是松耦合的，可以实现分离和复用(针对同样一份数据，ViewModel可以作用到多个UI上面)
4. 方便做单元测试

DataBinding
1. 通常，数据的流向是单向绑定，只能从业务逻辑处理后流向UI
2. 双向绑定模式下，业务逻辑中的数据改变时，UI上的数据能够得到刷新, 而当用户通过UI交互编辑了数据后，数据也能自动更新到相应的数据源上